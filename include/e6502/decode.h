#pragma once

#include "memory/sizes.h"
#include "e6502/instructions.h"

namespace E6502
{
    enum AddressingModesBitMasks
    {
        IMPLIED_EXCEPTION_1       = 0b00000000,
        IMPLIED_EXCEPTION_2       = 0b01000000,
        IMPLIED_EXCEPTION_3       = 0b01100000,
        IMPLIED_ZEROS_BITMASK_1   = 0b00000111,
        IMPLIED_ZEROS_BITMASK_2   = 0b00000101,
        IMPLIED_ONES_BITMASK_1    = 0b00011000,
        IMPLIED_ONES_BITMASK_2    = 0b10001010,
        RELATIVE_ZEROS_BITMASK    = 0b00001111,
        RELATIVE_ONES_BITMASK     = 0b00010000,
        IMMEDIATE_ZEROS_BITMASK   = 0b00010100,
        ZERO_PAGE_EXCEPTION       = 0b01010100,
        ZERO_PAGE_ZEROS_BITMASK   = 0b00011000,
        ZERO_PAGE_ONES_BITMASK    = 0b00000100,
        ZERO_PAGE_X_ZEROS_BITMASK = 0b00001000,
        ZERO_PAGE_X_ONES_BITMASK  = 0b00010100,
        ZERO_PAGE_Y_EXCEPTION_1   = 0b10110110,
        ZERO_PAGE_Y_EXCEPTION_2   = 0b10010110,
        ABSOLUTE_EXCEPTION        = 0b00100000,
        ABSOLUTE_ZEROS_BITMASK    = 0b00010000,
        ABSOLUTE_ONES_BITMASK     = 0b00001100,
        ABSOLUTE_X_ONES_BITMASK   = 0b00011100,
        ABSOLUTE_Y_EXCEPTION      = 0b10111110,
        ABSOLUTE_Y_ZEROS_BITMASK  = 0b00000110,
        ABSOLUTE_Y_ONES_BITMASK   = 0b00011000,
        INDIRECT_X_ZEROS_BITMASK  = 0b00011110,
        INDIRECT_X_ONES_BITMASK   = 0b00000001,
        INDIRECT_Y_ZEROS_BITMASK  = 0b00001110,
        INDIRECT_Y_ONES_BITMASK   = 0b00010001,
    };

    enum AddressingModes
    {
        NOT_IMPLEMENTED = 0,
        IMPLIED,
        RELATIVE,
        IMMEDIATE,
        ZERO_PAGE,
        ZERO_PAGE_X,
        ZERO_PAGE_Y,
        ABSOLUTE,
        ABSOLUTE_X,
        ABSOLUTE_Y,
        INDIRECT_X,
        INDIRECT_Y,
    };

    struct AddressingModeMask
    {
        Byte zerosMask;
        Byte onesMask;
        AddressingModes mode;
    };

    static const std::unordered_map<Byte, AddressingModes> exceptionModes = {
        {IMPLIED_EXCEPTION_1, IMPLIED},
        {IMPLIED_EXCEPTION_2, IMPLIED},
        {IMPLIED_EXCEPTION_3, IMPLIED},
        {ZERO_PAGE_EXCEPTION, ZERO_PAGE},
        {ZERO_PAGE_Y_EXCEPTION_1, ZERO_PAGE_Y},
        {ZERO_PAGE_Y_EXCEPTION_2, ZERO_PAGE_Y},
        {ABSOLUTE_EXCEPTION, ABSOLUTE},
        {ABSOLUTE_Y_EXCEPTION, ABSOLUTE_Y}
    };

    static const std::vector<AddressingModeMask> modeMasks = {
        {RELATIVE_ZEROS_BITMASK, RELATIVE_ONES_BITMASK, RELATIVE},
        {IMPLIED_ZEROS_BITMASK_1, IMPLIED_ONES_BITMASK_1, IMPLIED},
        {IMPLIED_ZEROS_BITMASK_2, IMPLIED_ONES_BITMASK_2, IMPLIED},
        {INDIRECT_X_ZEROS_BITMASK, INDIRECT_X_ONES_BITMASK, INDIRECT_X},
        {INDIRECT_Y_ZEROS_BITMASK, INDIRECT_Y_ONES_BITMASK, INDIRECT_Y},
        {ZERO_PAGE_ZEROS_BITMASK, ZERO_PAGE_ONES_BITMASK, ZERO_PAGE},
        {ZERO_PAGE_X_ZEROS_BITMASK, ZERO_PAGE_X_ONES_BITMASK, ZERO_PAGE_X},
        {IMMEDIATE_ZEROS_BITMASK, 0, IMMEDIATE}, // Immediate only needs a zeros mask
        {ABSOLUTE_ZEROS_BITMASK, ABSOLUTE_ONES_BITMASK, ABSOLUTE},
        {ABSOLUTE_Y_ZEROS_BITMASK, ABSOLUTE_Y_ONES_BITMASK, ABSOLUTE_Y},
        {0, ABSOLUTE_X_ONES_BITMASK, ABSOLUTE_X} // Absolute X only needs ones mask
    };

    enum InstructionsBitMasks
    {
        ADC_ZEROS_BITMASK = 0b10000010,
        ADC_ONES_BITMASK  = 0b01100001,
        AND_ZEROS_BITMASK = 0b11000010,
        AND_ONES_BITMASK  = 0b00100001,
        ASL_ZEROS_BITMASK = 0b11100001,
        ASL_ONES_BITMASK  = 0b00000110,
        BIT_ZEROS_BITMASK = 0b11010011,
        BIT_ONES_BITMASK  = 0b00100100,
        CMP_ZEROS_BITMASK = 0b00100010,
        CMP_ONES_BITMASK  = 0b11000001,
        CPX_ZEROS_BITMASK = 0b00010011,
        CPX_ONES_BITMASK  = 0b11100000,
        CPY_ZEROS_BITMASK = 0b00110011,
        CPY_ONES_BITMASK  = 0b11000000,
        DEC_ZEROS_BITMASK = 0b00100001,
        DEC_ONES_BITMASK  = 0b11000110,
        EOR_ZEROS_BITMASK = 0b10100010,
        EOR_ONES_BITMASK  = 0b01000001,
        INC_ZEROS_BITMASK = 0b00000001,
        INC_ONES_BITMASK  = 0b11100110,
        LDA_ZEROS_BITMASK = 0b01000010,
        LDA_ONES_BITMASK  = 0b10100001,
        LDX_ZEROS_BITMASK = 0b01000000,
        LDX_ONES_BITMASK  = 0b10100000,
        LDY_ZEROS_BITMASK = 0b01000011,
        LDY_ONES_BITMASK  = 0b10100000,
        LSR_ZEROS_BITMASK = 0b10100001,
        LSR_ONES_BITMASK  = 0b01000110,
        ORA_ZEROS_BITMASK = 0b11100010,
        ORA_ONES_BITMASK  = 0b00000001,
        ROL_ZEROS_BITMASK = 0b11000001,
        ROL_ONES_BITMASK  = 0b00100110,
        ROR_ZEROS_BITMASK = 0b10000001,
        ROR_ONES_BITMASK  = 0b01100110,
        SBC_ZEROS_BITMASK = 0b00000010,
        SBC_ONES_BITMASK  = 0b11100001,
        STA_ZEROS_BITMASK = 0b01100010,
        STA_ONES_BITMASK  = 0b10000001,
        STX_ZEROS_BITMASK = 0b01100001,
        STX_ONES_BITMASK  = 0b10000110,
        STY_ZEROS_BITMASK = 0b01100011,
        STY_ONES_BITMASK  = 0b10000100,
    };

    struct InstructionMask
    {
        Byte zerosMask;
        Byte onesMask;
        Instructions instruction;
    };

    static const std::vector<Instructions> uniqueInstructions = {
        BCC, BCS, BEQ, BMI, BNE, BPL, BRK, BVC, BVS, CLC, CLD, CLI,
        CLV, DEX, DEY, INX, INY, JMP, JSR, NOP, PHA, PHP, PLA, PLP,
        RTI, RTS, SEC, SED, SEI, TAX, TAY, TSX, TXA, TXS, TYA
    };

     static const std::vector<InstructionMask> instructionMasks = {
        {ADC_ZEROS_BITMASK, ADC_ONES_BITMASK, ADC},
        {AND_ZEROS_BITMASK, AND_ONES_BITMASK, AND},
        {ASL_ZEROS_BITMASK, ASL_ONES_BITMASK, ASL},
        {BIT_ZEROS_BITMASK, BIT_ONES_BITMASK, BIT},
        {CMP_ZEROS_BITMASK, CMP_ONES_BITMASK, CMP},
        {CPX_ZEROS_BITMASK, CPX_ONES_BITMASK, CPX},
        {CPY_ZEROS_BITMASK, CPY_ONES_BITMASK, CPY},
        {DEC_ZEROS_BITMASK, DEC_ONES_BITMASK, DEC},
        {EOR_ZEROS_BITMASK, EOR_ONES_BITMASK, EOR},
        {INC_ZEROS_BITMASK, INC_ONES_BITMASK, INC},
        {LDA_ZEROS_BITMASK, LDA_ONES_BITMASK, LDA},
        {LDX_ZEROS_BITMASK, LDX_ONES_BITMASK, LDX},
        {LDY_ZEROS_BITMASK, LDY_ONES_BITMASK, LDY},
        {LSR_ZEROS_BITMASK, LSR_ONES_BITMASK, LSR},
        {ORA_ZEROS_BITMASK, ORA_ONES_BITMASK, ORA},
        {ROL_ZEROS_BITMASK, ROL_ONES_BITMASK, ROL},
        {ROR_ZEROS_BITMASK, ROR_ONES_BITMASK, ROR},
        {SBC_ZEROS_BITMASK, SBC_ONES_BITMASK, SBC},
        {STA_ZEROS_BITMASK, STA_ONES_BITMASK, STA},
        {STX_ZEROS_BITMASK, STX_ONES_BITMASK, STX},
        {STY_ZEROS_BITMASK, STY_ONES_BITMASK, STY},
    };

    const Instructions decodeInstruction(const Byte &opcode);

    const AddressingModes decodeAddressingMode(const Byte &opcode);
}